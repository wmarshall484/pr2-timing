#include "ros/ros.h"
#include "trajectory_recorder/arm.h"
#include <vector>
#include <fstream>

double average(vector<double> times){
  
  double sum=0.0;
  for(int i = 0; i < times.size(); i++){
    sum+=times[i];
  }
  double ret = sum/(times.size());
  
  return ret;
}

double std_deviation(vector<double> times){
  
  double avg=average(times);
  double sum=0.0;
  for(int i = 0; i < times.size();i++){
    double val=times[i]-avg;
    if(val<0)
      val*=-1;
    sum+=val;
  }
  double ret = sum/(times.size()-1);
  
  return ret;
}

vector<double> removeOutliers(vector<double> times){
  
  double dev=std_deviation(times);
  double avg=average(times);
  vector<double> inliers;
  for(int i = 0;i<times.size();i++){
    if(!(((times[i]-avg)/dev)>1.96))
      inliers.push_back(times[i]);
  }
  
  return inliers;
}

void resetDefAndpath(double def[], double path[]){
  def[0] = 0.0;
  def[1] = 0.0;
  def[2] = 0.0;
  def[3] = -0.15;
  def[4] = 0.0;
  def[5] = 0.0;
  def[6] = 0.0;
  
  path[0] = 0.0;
  path[1] = 0.0;
  path[2] = 0.0;
  path[3] = -0.15;
  path[4] = 0.0;
  path[5] = 0.0;
  path[6] = 0.0;
}

vector<double> timesFromPrimitive(double primitive, Arm* rarm){
  double def[]={0.0,0.0,0.0,-0.15,0.0,0.0,0.0};
  double path[]={0.0,0.0,0.0,-0.15,0.0,0.0,0.0};
  vector<double> averages;
  vector<double> joint_time, joint_inliers;
  vector<vector<double> > times, originals;
  double delta0, delta1;
  
  for(int i = 0; i < 1; i++){
    for(delta0=rarm->min[i], delta1=delta0+primitive; delta1<rarm->max[i]; delta1+=primitive, delta0=delta1){
      def[i]=delta0; path[i]=delta1;
      //ROS_INFO("Moving %f %f", delta1, primitive);
      joint_time.push_back(rarm->time(def, path, 0));
      cout<<joint_time[joint_time.size()-1]<<endl;
    }
    
    joint_inliers = removeOutliers(joint_time);
    times.push_back(joint_inliers);
    originals.push_back(joint_time);
    joint_inliers.clear();
    joint_time.clear();
    resetDefAndpath(def,path);
  }
  for(int i = 0; i < times.size();i++){
    averages.push_back(average(times[i]));
  }
  
  return averages;
}

int main(int argc, char **argv){
  ros::init(argc, argv, "pr2_timer_node");
  ros::Subscriber sub;
  
  Arm rarm("right", sub);
  double max_angle = 2*3.1415926535;
  double fund_primitive=0.13962634016;
  double primitive = 0.0;
  double n = 100.0;
  double step = max_angle/n;

  double def[]={0.0,0.0,0.0,-0.15,0.0,0.0,0.0};
  double path[]={0.0,0.0,0.0,-0.15,0.0,0.0,0.0};
  
  
  vector<double> averages = timesFromPrimitive(fund_primitive, &rarm);
  
  for(int i = 0; i < averages.size(); i++){
    cout<<averages[i]<<" ";
  }
  /*path[0]=0.139;
  for(int i = 0; i < 5; i++){
    cout<<rarm.time(def, path, 0.1)<<endl;
    }*/


  /*
  vector<vector<double> > primitives_jointsaverages;
  vector<vector<vector<double > > > primitives_joints_times;
  for(primitive = 0.0; primitive < max_angle; primitive +=step){
    double def[]={0.0,0.0,0.0,-0.15,0.0,0.0,0.0};
    double path[]={0.0,0.0,0.0,-0.15,0.0,0.0,0.0};
    
    vector<double> joint_time, joint_inliers;
    vector<vector<double> > times, originals;
    double delta0, delta1;
    for(int i = 0; i < 1;i++){
      for(int j = 0; j < 1; j++){
	for(delta0=rarm.min[i], delta1=delta0+primitive;delta1<rarm.max[i];delta0=delta1, delta1+=primitive){
	  def[i]=delta0; path[i]=delta1;
	joint_time.push_back(rarm.time(def, path, 0));
	}
	for(delta0=rarm.max[i], delta1=delta0-primitive;delta1>rarm.min[i];delta0=delta1, delta1-=primitive){
	  def[i]=delta0; path[i]=delta1;
	  joint_time.push_back(rarm.time(def, path, 0));
	}
      }
      joint_inliers = removeOutliers(joint_time);
      times.push_back(joint_inliers);
      originals.push_back(joint_time);
      joint_inliers.clear();
      joint_time.clear();
      resetDefAndpath(def,path);
    }
    cout<<"Total number of statistical outliers per trial: "<<endl;
    int num_inliers;
    for(int i =0; i < 7; i++){
      num_inliers=originals[i].size()-times[i].size();
      cout<<"Joint "<<i<<": ("<<num_inliers<<" out of "<<originals[i].size()<<") ";
      num_inliers=0;
    }
    vector<double> averages;
    cout<<endl<<"Average times:"<<endl;
    for(int i = 0; i < 7;i++){
      cout<<average(times[i])<<" ";
      averages.push_back(average(times[i]));
    }
    primitives_jointsaverages.push_back(averages);
    primitives_joints_times.push_back(times);
    cout<<endl;
    averages.clear();
  }
  */
  /*for(delta0=.564, delta1=.564-primitive;delta1>-2.135;delta0=delta1, delta1-=primitive){
    def[0]=delta0; path[0]=delta1;
    times.push_back(rarm.time(def, path, 0));
    }*//*
	 double sum=0.0;
	 times[0]=100.0;
	 vector<double> inliers = removeOutliers(times);
	 for(int i = 0; i < times.size();i++){
    cout<<times[i]<<" ";
    }
    cout<<endl<<endl;
    for(int i = 0; i < inliers.size();i++){
    cout<<inliers[i]<<" ";
    }
    cout<<endl<<endl;
    cout<<"Times: "<<times.size()<<" Inliers: "<<inliers.size()<<endl;
    cout<<endl<<"Average: "<<average(inliers)<<endl;*/
  return 0;
}
